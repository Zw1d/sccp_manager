<?php
// vim: set ai ts=4 sw=4 ft=php:
// Version for SCCP Manager 13.0.X
//
/*  This is the driver for Sccp_manager in FreePBX.
    It is loaded via an include, written by the installer, at
    modules/core/functions.inc/drivers
    and provides the following required methods. it provides the interface between
    FreePBX extensions and sccp_manager lines
 *
 *          getInfo
 *          addDevice
 *          delDevice
 *          getDevice
 *          getDefaultDeviceSettings
 *          getDeviceDisplay
 *
 */
//
namespace FreePBX\modules\Core\Drivers;
class Sccp extends \FreePBX\modules\Core\Driver {
    private $data_fld = array("pin"=>'pin', "label" => 'label', "accountcode" => 'account',
                           "context" =>'context',"incominglimit"=>'incominglimit',
                           "callgroup"=>'callgroup',"pickupgroup"=>'pickupgroup',
                           "transfer" => 'transfer', "echocancel" => 'echocancel',
                           "language" => 'language', "description" => 'callerid',
                           "cid_num" => 'cid_num', "cid_name" => 'label', "mailbox" => 'mailbox',
                           "musicclass" => 'musicclass', "allow" => 'allow',"disallow" => 'disallow',
                           "videomode" => 'videomode',
                           "dnd" => 'dnd', "silencesuppression" => 'silencesuppression',
                           "secondary_dialtone_digits" => 'secondary_dialtone_digits', "secondary_dialtone_tone" => 'secondary_dialtone_tone',
                           'namedcallgroup'=>'namedcallgroup', 'namedpickupgroup' => 'namedpickupgroup'
                      );
    private $guiDefaults =array(
                      'gui_checkset' => array( "elemname" => "",
                                        "prompttext" => "",
                                        "helptext" => "",
                                        "currentvalue" => "",
                                        "valarray" => array(),
                                        "jsonclick" => '',
                                        "jsvalidation" => "",
                                        "failvalidationmsg" => "",
                                        "canbeempty" => true,
                                        "maxchars" => 0,
                                        "disable" => false,
                                        "inputgroup" => false,
                                        "class" => "",
                                        "cblabel" => 'Enable',
                                        "disabled_value" => 'DEFAULT',
                                        "check_enables" => 'true',
                                        "cbdisable" => false,
                                        "cbclass" => '')
                        );
    private $line_defaults = array();

    public function __construct($parent_class = null) {

        $this->freepbx = $parent_class;
        $this->database = $parent_class->Database();

        $stmt = $this->database->prepare('DESCRIBE sccpline');
        $stmt->execute();
        $raw_settings = $stmt->fetchAll(\PDO::FETCH_ASSOC);
        foreach ($raw_settings as $row) {
            $this->line_defaults[$row["Field"]] = $row["Default"];
        }
    }

    public function getInfo() {
		    return array(
      			"rawName" => "sccp",
      			"hardware" => "sccp_custom",
      			"prettyName" => _("Sccp Custom Driver"),
      			"shortName" => "SCCP",
      			"description" => _("Sccp Device"),
      			"Version" => "11.5",
      			"about" => "Sccp class Base ver: 11.5, Sccp ver: default"
        );
    }

    public function addDevice($id, $settings) {
        global $currentcomponent;
        $add_fld = array ("name"=>'label',"outboundcid"=>'cid_num',"langcode"=>'language',"extdisplay"=>'description','devinfo_mailbox'=>'mailbox');
        $settings['cid_num']['value'] = '';
        $settings['cid_name']['value'] = '';
        $settings['mailbox']['value']= '';

        // Add $_REQUEST values to settings
        if (isset($_REQUEST)){
            foreach($add_fld as $key => $val) {
                if (!empty($_REQUEST[$key])){
                    $settings[$val]['value'] = $_REQUEST[$key];
                }
            }
        }
        $allow_codec = array();
        foreach($settings as $key => $val) {
            if (strpos($key,'codec_') !== false ) {
                 $allow_codec[] =substr($key,6);
            }
        }
        $settings['allow']['value'] = implode(",", $allow_codec);

	      // If set, parse outboundcid content into cid_num and cid_name sccpline fields
        if (!empty($settings['cid_num']['value'])) {
            $outboundcid = $settings['cid_num']['value'];
            if (preg_match('/"(.*)"\s?<(.*)>/', $outboundcid, $matches)) {
                $settings['cid_num']['value'] = $matches[2];
                $settings['cid_name']['value'] = $matches[1];
            } else if (is_integer($outboundcid)) {
                $settings['cid_num']['value'] = $outboundcid;
            }
        }

        if (!empty($_REQUEST['vm']) && ($_REQUEST['vm'] =='enabled')){ // mailbox
            if (empty($settings['mailbox']['value'])) {
                $settings['mailbox']['value']= $id;
            }
        }

        $sqlCol = 'name';
        $sqlVal = "'{$id}'";
        foreach($this->data_fld as $key => $val) {
            if (array_key_exists($key, $this->line_defaults)) {
                if (isset($settings[$val]['value'])){
                    $sqlCol .= ", {$key}";
                    $sqlVal .= ", '{$settings[$val]['value']}'";
                } else {
                    $sqlCol .= ", {$key}";
                    $sqlVal .= ", DEFAULT( {$key} )";
                }
            }
        }
        $sql = "REPLACE INTO sccpline ( {$sqlCol} ) VALUES ( {$sqlVal} );";

        $sth = $this->database->prepare($sql);
        $sth->execute();
        /*
        If called from SCCP Phone, redirect to SCCP Phone page on submit.
        This was last function in add so should be safe.
        Prefer to add in Hooks, but is not followed even if set for $currentcomponent
        Do nothing if called from QuickCreateExtension when display is not set
        */
        if (isset($_REQUEST['display'])) {
            redirect("config.php?display=sccp_phone", false);
        }
        // Have changed something so need to reload the device
        // TODO: are we reloading the device or reloading Asterisk
        $this->reload_line($id);
        return true;
    }

    public function delDevice($id) {
        $sql = "DELETE FROM sccpline WHERE name = ?";
        $sth = $this->database->prepare($sql);
        $sth->execute(array($id));
        return true;
  	}


    public function getDevice($id) {
        $sccp_line = array();
        $sql = "SELECT name as id, name as name ";
        foreach($this->data_fld as $key => $val) {
                        $sql .= ',`'. $key .'` as '.$val;
        }
        $sql .= " FROM sccpline WHERE name = ?";
        $sth = $this->database->prepare($sql);
        $result = array();
        $tech = array();
            try {
            $sth->execute(array($id));
            $result = $sth->fetch(\PDO::FETCH_ASSOC);
                        $tech = $result;
                        $tech['dial']='SCCP/'.$id;
        } catch(\Exception $e) {}

        return $tech;
    }

    public function getDefaultDeviceSettings($id, $displayname, &$flag) {

      	$dial = 'SCCP';
      	$settings  = array(
                        "mailbox" => array(
                                    "value" => $this->line_defaults['mailbox'],
                                    "flag" => $flag++
                        ),
                    		"incominglimit" => array(
                            		"value" => $this->line_defaults['incominglimit'],
                            		"flag" => $flag++
                    		),
                    		"context" => array(
                            		"value" => $this->line_defaults['context'],
                            		"flag" => $flag++
                    		),
                        "directed_pickup_context" => array(
                            		"value" => $this->line_defaults['directed_pickup_context'],
                            		"flag" => $flag++
                    		),
                    		"callgroup" => array(
                            		"value" => $this->line_defaults['callgroup'],
                            		"flag" => $flag++
                    		),
                    		"pickupgroup" => array(
                            		"value" => $this->line_defaults['pickupgroup'],
                            		"flag" => $flag++
                    		),
                        "namedcallgroup" => array(
                            		"value" => $this->line_defaults['namedcallgroup'],
                            		"flag" => $flag++
                    		),
                    		"namedpickupgroup" => array(
                            		"value" => $this->line_defaults['namedpickupgroup'],
                            		"flag" => $flag++
                    		),
                    		"adhocNumber" => array(
                            		"value" => $this->line_defaults['adhocNumber'],
                            		"flag" => $flag++
                    		),
                    		"secondary_dialtone_digits" => array(
                            		"value" => $this->line_defaults['secondary_dialtone_digits'],
                            		"flag" => $flag++
                    		),
                    		"secondary_dialtone_tone" => array(
                            		"value" => $this->line_defaults['secondary_dialtone_tone'],
                            		"flag" => $flag++
                    		),
                        "directed_pickup" => array(
                                "value" => $this->line_defaults['directed_pickup'],
                                "flag" => $flag++
                        ),
                        "pickup_modeanswer" => array(
                                "value" => $this->line_defaults['pickup_modeanswer'],
                                "flag" => $flag++
                        ),
                        "transfer" => array(
                                "value" => $this->line_defaults['transfer'],
                                "flag" => $flag++
                        ),
                        "echocancel" => array(
                                "value" => $this->line_defaults['echocancel'],
                                "flag" => $flag++
                        ),
                        "dnd" => array(
                            		"value" => $this->line_defaults['dnd'],
                            		"flag" => $flag++
                    		),
                        "silencesuppression" => array(
                                "value" => $this->line_defaults['silencesuppression'],
                                "flag" => $flag++
                        ),
                    		"musicclass" => array(
                            		"value" => $this->line_defaults['musicclass'],
                            		"flag" => $flag++
        		            ),
                        "pin" => array(
                                "value" => $this->line_defaults['pin'],
                                "flag" => $flag++
                        ),
                        "allow" => array(
                                "value" => $this->line_defaults['allow'],
                                "flag" => $flag++
                        ),
                        "disallow" => array(
                                "value" => $this->line_defaults['disallow'],
                                "flag" => $flag++
                        ),
  	                );
      	return array(
            		"dial" => $dial,
            		"settings" => $settings
            	  );
    }

    public function getDeviceDisplay($display, $deviceInfo, $currentcomponent, $primarySection) {

    		$section = _("SCCP Extension Details");
    		$section_с = _("SCCP Codec Details");
        $gn_category = "sccp";
        global $currentcomponent, $display;
        $named_group = $this->getNamedGroup();
        //add sccp category
        $currentcomponent->addTabTranslation('sccp',_('SCCP'));

        //Fill Codecs Informations

        $Sccp_Codec = array('alaw', 'ulaw', 'g722', 'g723', 'g726', 'g729', 'gsm', 'h264', 'h263', 'h261');
        $allCodecs  = $this->freepbx->Codecs->getAudio(true);
        $allVCodecs = $this->freepbx->Codecs->getVideo();
        $ACodec_cur = array('all');
        $VCodec_cur = array('all');

        foreach ($allCodecs as $c => $v) {
            if (array_search($c,$Sccp_Codec) !=null) {
                $currentcomponent->addoptlistitem('devinfo_sccp_codec', "devinfo_codec_"."$c", "$c");
                if (isset($deviceInfo['allow'])) {
                    if (strpos($deviceInfo['allow'],$c)!== false) {
                        $ACodec_cur[] ="devinfo_codec_"."$c";
                    }
                }
            }
        }

        foreach ($allVCodecs as $c => $v) {
            if (array_search($c,$Sccp_Codec) !=null) {
                $currentcomponent->addoptlistitem('devinfo_sccp_vcodec', "devinfo_codec_"."$c", "$c");
                if (isset($deviceInfo['allow'])) {
                    if (strpos($deviceInfo['allow'],$c)!== false) {
                        $VCodec_cur[] ="devinfo_codec_"."$c";
                    }
                }
            }
        }

        $el = array(
            "elemname" => "devinfo_sccp_codec",
            "prompttext" => _('Line Audio Codec:'),
            "helptext" => _("Line Audio Codec"),
            "currentvalue" => $ACodec_cur,
            "valarray" => $currentcomponent->getoptlist('devinfo_sccp_codec'),
            "class" => $section_с,
            "disable" => 0
        );

        $currentcomponent->addguielem($section_с, new \gui_checkset(array_merge($this->guiDefaults['gui_checkset'],$el)), $gn_category);
        unset($el);

        $el = array(
            "elemname" => "devinfo_sccp_vcodec",
            "prompttext" => _('Line Video Codec:'),
            "helptext" => _("Line Video Codec"),
            "currentvalue" => $VCodec_cur,
            "valarray" => $currentcomponent->getoptlist('devinfo_sccp_vcodec'),
            "class" => $section_с,
            "disable" => 0
        );
        $currentcomponent->addguielem($section_с, new \gui_checkset(array_merge($this->guiDefaults['gui_checkset'],$el)), $gn_category);

    		$tmparr = array();
        $tt = _("Name or id of linked maibox");
    		$tmparr['mailbox'] = array('prompttext' => _('Mailbox'), 'value' => $this->line_defaults['mailbox'], 'tt' => $tt, 'level' => 1, 'section' => $section,'category' => $gn_category);

        $tt = _("The SCCP channel number for this port. If you plaining to use this line as 'Shared' or use on several devices - leave this field blank or set limit to 10 calls.");
        $tmparr['incominglimit'] = array('prompttext' => _('Incoming Call Limit'), $this->line_defaults['incominglimit'], 'tt' => $tt, 'level' => 1, 'section' => $section,'category' => $gn_category);

        $tt = _("Asterisk context this device will send calls to. Only change this is you know what you are doing.");
        $tmparr['context'] = array('prompttext' => _('Line context'), 'value' => $this->line_defaults['context'], 'tt' => $tt, 'level' => 1, 'section' => $section,'category' => $gn_category);

        $tt = _("Asterisk context this device will can pickup calls. Only change this is you know what you are doing.");
        $tmparr['directed_pickup_context'] = array('prompttext' => _('Directed PickUp Сontext '), 'value' => $this->line_defaults['directed_pickup_context'], 'tt' => $tt, 'level' => 1, 'section' => $section,'category' => $gn_category);

        $tt = _("Sets the named caller groups this line is a member of (ast111) : ");
        if (!empty($named_group['namedcallgroup'])) {
            foreach ($named_group['namedcallgroup'] as $val) {
                $tt .= $val. ', ';
            }
            $tt .= '... ';
        }
    		$tmparr['namedcallgroup'] = array('prompttext' => _('Named Call Group'),'value' => $this->line_defaults['namedcallgroup'], 'tt' => $tt, 'level' => 1, 'section' => $section,'category' => $gn_category);

        $tt = _("Named PickupGroup : ");
                    if (!empty($named_group['namedpickupgroup'])) {
                        foreach ($named_group['namedpickupgroup'] as $val) {
                            $tt .= $val. ', ';
                        }
                        $tt .= '... ';
                    }
    		$tmparr['namedpickupgroup'] = array('prompttext' => _('Named Pickup Group'),'value' => $this->line_defaults['namedpickupgroup'], 'tt' => $tt, 'level' => 1, 'section' => $section,'category' => $gn_category);

        $tt = _("Digits to indicate an external line to user (secondary dialtone) Sample 9 or 8 (max 9 digits)");
    		$tmparr['secondary_dialtone_digits'] = array('prompttext' => _('Secondary dialtone digits'), 'value' => $this->line_defaults['secondary_dialtone_digits'], 'tt' => $tt, 'level' => 1, 'section' => $section,'category' => $gn_category);

        unset($select);
        $select[] = array( 'value' => '0x21', 'text' => 'Inside Dial Tone');
        $select[] = array( 'value' => '0x22', 'text' => 'Outside Dial Tone');
        $select[] = array( 'value' => '0x23', 'text' => 'Line Busy Tone');
        $select[] = array( 'value' => '0x24', 'text' => 'Alerting Tone');
        $select[] = array( 'value' => '0x25', 'text' => 'Reorder Tone');
        $select[] = array( 'value' => '0x26', 'text' => 'Recorder Warning Tone');
        $select[] = array( 'value' => '0x27', 'text' => 'Recorder Detected Tone');
        $select[] = array( 'value' => '0x28', 'text' => 'Reverting Tone');
        $select[] = array( 'value' => '0x29', 'text' => 'Receiver OffHook Tone');
        $select[] = array( 'value' => '0x2A', 'text' => 'Partial Dial Tone');
        $select[] = array( 'value' => '0x2B', 'text' => 'No Such Number Tone');
        $select[] = array( 'value' => '0x2C', 'text' => 'Busy Verification Tone');
        $select[] = array( 'value' => '0x2D', 'text' => 'Call Waiting Tone');
        $select[] = array( 'value' => '0x2E', 'text' => 'Confirmation Tone');
        $select[] = array( 'value' => '0x2F', 'text' => 'Camp On Indication Tone');
        $select[] = array( 'value' => '0x30', 'text' => 'Recall Dial Tone');
        $select[] = array( 'value' => '0x31', 'text' => 'Zip Zip');
        $select[] = array( 'value' => '0x32', 'text' => 'Zip');
        $select[] = array( 'value' => '0x33', 'text' => 'Beep Bonk');
        $select[] = array( 'value' => '0x34', 'text' => 'Music Tone');
        $select[] = array( 'value' => '0x35', 'text' => 'Hold Tone');
        $select[] = array( 'value' => '0x36', 'text' => 'Test Tone');
        $select[] = array( 'value' => '0x37', 'text' => 'DT Monitor Warning Tone');
        $select[] = array( 'value' => '0x40', 'text' => 'Add Call Waiting');
        $select[] = array( 'value' => '0x41', 'text' => 'Priority Call Wait');
        $select[] = array( 'value' => '0x42', 'text' => 'Recall Dial');
        $select[] = array( 'value' => '0x43', 'text' => 'Barg In');
        $select[] = array( 'value' => '0x44', 'text' => 'Distinct Alert');
        $select[] = array( 'value' => '0x45', 'text' => 'Priority Alert');
        $select[] = array( 'value' => '0x46', 'text' => 'Reminder Ring');
        $select[] = array( 'value' => '0x47', 'text' => 'Precedence RingBank');
        $select[] = array( 'value' => '0x48', 'text' => 'Pre-EmptionTone');
        $select[] = array( 'value' => '0x67', 'text' => '2105 HZ');
        $select[] = array( 'value' => '0x68', 'text' => '2600 HZ');
        $select[] = array( 'value' => '0x69', 'text' => '440 HZ');
        $select[] = array( 'value' => '0x6A', 'text' => '300 HZ');
        $select[] = array( 'value' => '0x77', 'text' => 'MLPP Pala');
        $select[] = array( 'value' => '0x78', 'text' => 'MLPP Ica');
        $select[] = array( 'value' => '0x79', 'text' => 'MLPP Vca');
        $select[] = array( 'value' => '0x7A', 'text' => 'MLPP Bpa');
        $select[] = array( 'value' => '0x7B', 'text' => 'MLPP Bnea');
        $select[] = array( 'value' => '0x7C', 'text' => 'MLPP Upa');
/* !TODO!: I would remove the values below this line, except for 'No Tone' */
//                $select[] = array( 'value' => '0x7F', 'text' => 'No Tone');
        $select[] = array( 'value' => '0x80', 'text' => 'Meetme Greeting Tone');
        $select[] = array( 'value' => '0x81', 'text' => 'Meetme Number Invalid Tone');
        $select[] = array( 'value' => '0x82', 'text' => 'Meetme Number Failed Tone');
        $select[] = array( 'value' => '0x83', 'text' => 'Meetme Enter Pin Tone');
        $select[] = array( 'value' => '0x84', 'text' => 'Meetme Invalid Pin Tone');
        $select[] = array( 'value' => '0x85', 'text' => 'Meetme Failed Pin Tone');
        $select[] = array( 'value' => '0x86', 'text' => 'Meetme CFB Failed Tone');
        $select[] = array( 'value' => '0x87', 'text' => 'Meetme Enter Access Code Tone');
        $select[] = array( 'value' => '0x88', 'text' => 'Meetme Access Code Invalid Tone');
        $select[] = array( 'value' => '0x89', 'text' => 'Meetme Access Code Failed Tone');
        $select[] = array('value' => 'yes', 'text' => 'Yes');
        $select[] = array('value' => 'no', 'text' => 'No');

        $tt = _("Outside dialtone frequency (defaul 0x22)");
        $tmparr['secondary_dialtone_tone'] = array('prompttext' => _('Secondary dialtone'), 'value' => $this->line_defaults['secondary_dialtone_tone'], 'tt' => $tt, 'select' => $select, 'level' => 1, 'type' => 'select', 'section' => $section,'category' => $gn_category);

        unset($select);
        $select[] = array('value' => 'on', 'text' => 'Yes');
        $select[] = array('value' => 'off', 'text' => 'No');
        $tt = _("Enable/Disable the `directed` pickup softkey");
        $tmparr['directed_pickup'] = array('prompttext' => _('Directed pickup'), 'value' => $this->line_defaults['directed_pickup'], 'tt' => $tt, 'select' => $select, 'level' => 1, 'type' => 'radio', 'section' => $section,'category' => $gn_category);

        unset($select);
        $select[] = array('value' => 'on', 'text' => 'Yes');
        $select[] = array('value' => 'off', 'text' => 'No');
        $tt = _("Should the picked/gpicked-up call be answered automatically");
        $tmparr['pickup_modeanswer'] = array('prompttext' => _('Pickup  Modeanswer'), 'value' => $this->line_defaults['pickup_modeanswer'], 'tt' => $tt, 'select' => $select, 'level' => 1, 'type' => 'radio', 'section' => $section,'category' => $gn_category);

        unset($select);
        $select[] = array('value' => 'on', 'text' => 'Yes');
        $select[] = array('value' => 'off', 'text' => 'No');
        $tt = _("Allow call transfer.");
//                $tmparr['transfer'] = array('prompttext' => _('Call Transfer'), 'value' => 'yes', 'tt' => $tt, 'select' => $select, 'level' => 1, 'type' => 'radio', 'section' => $section, 'category' => 'general');
        $tmparr['transfer'] = array('prompttext' => _('Call Transfer'), 'value' => $this->line_defaults['transfer'], 'tt' => $tt, 'select' => $select, 'level' => 1, 'type' => 'radio', 'section' => $section,'category' => $gn_category);

        unset($select);
        $select[] = array('value' => 'on', 'text' => 'Yes');
        $select[] = array('value' => 'off', 'text' => 'No');
        $tt = _("Echo cancel");
        $tmparr['echocancel'] = array('prompttext' => _('Echo cancel'), 'value' => $this->line_defaults['echocancel'], 'tt' => $tt, 'select' => $select, 'level' => 1, 'type' => 'radio', 'section' => $section,'category' => $gn_category);

        unset($select);
        $select[] = array('value' => 'off', 'text' => 'Off');
        $select[] = array('value' => 'reject', 'text' => 'Reject');
        $select[] = array('value' => 'silent', 'text' => 'Silent');
        $select[] = array('value' => 'user', 'text' => 'Cycle');
        $tt = _("DND: Means how will dnd react when it is set on the device level dnd can have three states: off / busy(reject) / silent / Cycle").'<br>'.
              _("Cycle  - dnd that cycles through all three states off -> reject -> silent -> off (this is the normal behaviour)").'<br>'.
              _("Reject - Usesr can only switch off and on (in reject/busy mode)").'<br>'.
              _("Silent - Usesr can only switch off and on (in silent mode)");
        $tmparr['dnd'] = array('prompttext' => _('DND'), 'value' => $this->line_defaults['dnd'], 'tt' => $tt, 'select' => $select, 'level' => 1, 'type' => 'radio', 'section' => $section,'category' => $gn_category);

        unset($select);
        $select[] = array('value' => 'on', 'text' => 'Yes');
        $select[] = array('value' => 'off', 'text' => 'No');
        $tt = _("Silence Suppression. Asterisk Not supported");
        $tmparr['silencesuppression'] = array('prompttext' => _('Silence Suppression'), 'value' => $this->line_defaults['silencesuppression'], 'tt' => $tt, 'select' => $select, 'level' => 1, 'type' => 'radio', 'section' => $section,'category' => $gn_category);

        unset($select);
        $select[] = array('value' => 'default', 'text' => _('default'));
        if (function_exists('music_list')){
            $moh_list = music_list();
        } else {
            $moh_list  = array('default');
        }
        foreach ($moh_list as $value) {
            $select[] = array('value' => $value, 'text' => _($value));
        }

        $tt = _("Music on hold");
        $tmparr['musicclass'] = array('prompttext' => _('Music on hold'), 'value' => $this->line_defaults['musicclass'], 'tt' => $tt, 'select' => $select, 'level' => 1, 'section' => $section,'category' => $gn_category);
        unset($select);

        $tt = _("Sets the named pickup groups this line is a member of (this phone can pickup calls from remote phones which are in this caller group (ast111)");
        $tmparr['pin'] = array('value' => '', 'tt' => $tt, 'level' => 1, 'section' => $section ,'category' => $gn_category);
        unset($select);

        $select[] = array('value' => 'off', 'text' => 'Off');
        $select[] = array('value' => 'user', 'text' => 'User');
        $select[] = array('value' => 'auto', 'text' => 'Auto');
        $tt = _("Automatic or Manual video mode. Valid values are 'auto', 'user' or 'off'. When set to 'auto', video will automatically start if both parties have a compatible code enabled. In 'user' mode the user needs to press the vidmode softkey before video will be tried. Default:'auto'");
        $tmparr['videomode'] = array('prompttext' => _('Video Mode '), 'value' => 'auto', 'tt' => $tt, 'select' => $select, 'level' => 1, 'type' => 'radio', 'section' => $section_с, 'category' => $gn_category);
        unset($select);

        $tt = _("Codec disallow");
        $tmparr['disallow'] = array('prompttext' => _('Codec disallow'), 'value' => 'all', 'tt' => $tt, 'level' => 1, 'section' => $section_с,'category' => $gn_category);
        unset($select);

        $devopts = $tmparr;
        return $devopts;
      	}

    public function reload_line($id) {
        global $astman;
        // TODO: Change to use amInterfaceClasses
        $result = $astman->Command('sccp reload line ' . $id);
        return $result;
    }

    public function getNamedGroup() {
        $sql = "SELECT namedcallgroup FROM sccpline GROUP BY namedcallgroup";
        $sth = $this->database->prepare($sql);
        $result = array();
        $tech = array();
        try {
            $sth->execute();
            $result = $sth->fetchAll();
            foreach($result as $val) {
               $tech['namedcallgroup'][] = $val[0];
            }
        } catch(\Exception $e) {}
        $sql = "SELECT namedpickupgroup FROM sccpline GROUP BY namedpickupgroup";
        $sth = $this->database->prepare($sql);
        try {
            $sth->execute();
            $result = $sth->fetchAll();
            foreach($result as $val) {
               $tech['namedpickupgroup'][] = $val[0];
            }
        } catch(\Exception $e) {}

    return $tech;
    }

    public function getDeviceHeaders() {
        return array(
                'secret' => array('identifier' => _('Secret'), 'description' => sprintf(_('Secret [Enter "%s" to regenerate]'),"REGEN")),
        );
    }
}
